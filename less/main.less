
//commented out, so that they can be set with Less.php
//if you need to manually generate, uncomment these
/*
@displacement_top: 0px;
@displacement_left: 0px;
@diameter_inner: 750px;
@diameter_outer: 1200px;
@perspective_rotate: 0deg;
*/

@perspective_depth: 1000px;


body {
    background-color: black;
    margin: 0 !important;
    padding: 0 !important;
}

/**
 * Top level container which defines the perspective depth.
 */
#perspective_parent {
    perspective: @perspective_depth;
    perspective-origin: 50% 50%;
    
    position: absolute;
    top: @displacement_top;
    left: @displacement_left;
    width: @diameter_outer;
    height: @diameter_outer;
}

/**
 * Child of the perspective container, contains the rest of the page elements.
 */
#body_container {
    transform: rotateX(@perspective_rotate);
    overflow: hidden;
    
    position: absolute;
    top: 0;
    left: 0;
    width: @diameter_outer;
    height: @diameter_outer;
}

/**
 * A cute little circled dot to mark the centrepoint.
 */
#crosshair {
    z-index: 100;
    height: 20px;
    width: 20px;
    position: absolute;
    top: (@diameter_outer/2) - 10px; /* + @displacement_top; */
    left: (@diameter_outer/2) - 10px; /* + @displacement_left; */
    
    background-image: radial-gradient(circle, white 1px, transparent 8px, white 10px, transparent 0);
    
    .disable_user_interaction;
}

/**
 * The container for the globe.
 * Height and width should be equal.
 * Z-index should be lower than other divs.
 */
#globe {
    z-index: 0;
    height: @diameter_outer;
    width: @diameter_outer;
    position: absolute;
    top: 0; /* @displacement_top; */
    left: 0; /* @displacement_left; */
}

/**
 * The mask to place over the globe.
 * Dimensions and position should match globe container.
 */
#globe_mask {
    z-index: 1;
    height: @diameter_outer;
    width: @diameter_outer;
    position: absolute;
    top: 0; /* @displacement_top; */
    left: 0; /* @displacement_left; */
    
    background-image: radial-gradient(circle, transparent (@diameter_inner/2), white 0, white (@diameter_outer/2), black 0);
    
    .disable_user_interaction;
}

/**
 * The mask that covers anything that would drift over the table edge.
 * Dimensions and position should match globe container.
 */
#table_mask {
    z-index: 100;
    height: @diameter_outer;
    width: @diameter_outer;
    position: absolute;
    top: 0; /* @displacement_top; */
    left: 0; /* @displacement_left; */
    
    background-image: radial-gradient(circle, transparent (@diameter_outer/2), black 0);
    
    .disable_user_interaction;
}

//XXX including webkit prefixes until a proper automation process is sorted out

@keyframes clockwise {
    from {
        transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
        -webkit-transform: rotate(360deg);
    }
}

@keyframes anticlockwise {
    from {
        transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
    }
    to {
        transform: rotate(-360deg);
        -webkit-transform: rotate(-360deg);
    }
}

@-webkit-keyframes clockwise {
    from {
        transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
        -webkit-transform: rotate(360deg);
    }
}

@-webkit-keyframes anticlockwise {
    from {
        transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
    }
    to {
        transform: rotate(-360deg);
        -webkit-transform: rotate(-360deg);
    }
}

.rotate(@clockwise: true, @duration)
        when (isnumber(@duration))
        and (@clockwise) {
    animation-name: clockwise;
    animation-duration: @duration;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    -webkit-animation-name: clockwise;
    -webkit-animation-duration: @duration;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;
}

.rotate(@clockwise: true, @duration)
        when (isnumber(@duration)) 
        and not (@clockwise) {
    animation-name: anticlockwise;
    animation-duration: @duration;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    -webkit-animation-name: anticlockwise;
    -webkit-animation-duration: @duration;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;
}

/**
 * With visually intensive elements, you may want to encourage GPU rendering.
 * This is done by tricking the browser into 3D rendering.
 */
.encourage_GPU_rendering() {
    transform: translateZ(0);
    /* transform: translate3d(0, 0, 0); */
    transform-style: preserve-3d;
    backface-visibility: hidden;
}

/**
 * Effectively allows the user to click underlying elements.
 * Might want to disable later, like when Kinect integration is finished.
 * You may want to disable this, rely on Pointer Lock, and use elementFromPoint
 * to simulate left clicks on the table with Kinect depth data.
 */
.disable_user_interaction() {
    user-select: none;
    pointer-events: none;
}

/**
 * To be used with the orbitText() JavaScript method. The JavaScript method 
 * takes a div containing text and formats it such that each letter is rotated
 * as if it were around a circle. This mixin will actually put the elements in
 * a circle.
 */
.orbit_text(@outwards: true, @radius_orbit_outer, @radius_orbit_inner) {
    @width: 20px;
    
    div {
        font-size: (@radius_orbit_outer - @radius_orbit_inner)/2;
        font-family: Monaco, MonoSpace;
        font-weight: bold;
        text-transform: uppercase;
        width: @width;
        height: @radius_orbit_outer;
        line-height: @radius_orbit_outer - @radius_orbit_inner;
        position: absolute;
        left: @radius_orbit_outer - @width/2;

        span {
            position: absolute;
        }
    }
}
.orbit_text(@outwards: true, @radius_orbit_outer, @radius_orbit_inner)
        when (@outwards) {
    
    div {
        transform-origin: top center;
        -webkit-transform-origin: top center;
        top: @radius_orbit_outer;
        
        span {
            bottom: 0;
        }
    }
}
.orbit_text(@outwards: true, @radius_orbit_outer, @radius_orbit_inner)
        when not (@outwards) {
    
    div {
        transform-origin: bottom center;
        -webkit-transform-origin: bottom center;
        top: 0px;
        
        span {
            top: 0;
        }
    }
}