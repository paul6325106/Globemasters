body {
  background-color: black;
}
#perspective_parent {
  perspective: 1000px;
  position: absolute;
  top: 0px;
  left: 0px;
  width: 1200px;
  height: 1200px;
}
#body_container {
  transform: rotateX(30deg);
  overflow: hidden;
  position: absolute;
  top: 0px;
  left: 0px;
  width: 1200px;
  height: 1200px;
}
/**
 * A cute little circled dot to mark the centrepoint.
 */
#crosshair {
  z-index: 100;
  height: 20px;
  width: 20px;
  position: absolute;
  top: 590px;
  /* + @top_displacement; */
  left: 590px;
  /* + @left_displacement; */
  background-image: radial-gradient(circle, #ffffff 1px, transparent 8px, #ffffff 10px, transparent 0);
  user-select: none;
  pointer-events: none;
}
/**
 * The container for the globe.
 * Height and width should be equal.
 * Z-index should be lower than other divs.
 */
#globe {
  z-index: 0;
  height: 1200px;
  width: 1200px;
  position: absolute;
  top: 0;
  /* @top_displacement; */
  left: 0;
  /* @left_displacement; */
}
/**
 * The mask to place over the globe.
 * Dimensions and position should match globe container.
 */
#globe_mask {
  z-index: 1;
  height: 1200px;
  width: 1200px;
  position: absolute;
  top: 0;
  /* @top_displacement; */
  left: 0;
  /* @left_displacement; */
  background-image: radial-gradient(circle, transparent 375px, #ffffff 0, #ffffff 600px, #000000 0);
  user-select: none;
  pointer-events: none;
}
/**
 * The mask that covers anything that would drift over the table edge.
 * Dimensions and position should match globe container.
 */
#table_mask {
  z-index: 100;
  height: 1200px;
  width: 1200px;
  position: absolute;
  top: 0;
  /* @top_displacement; */
  left: 0;
  /* @left_displacement; */
  background-image: radial-gradient(circle, transparent 600px, #000000 0);
  user-select: none;
  pointer-events: none;
}
@keyframes clockwise {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
@keyframes anticlockwise {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(-360deg);
  }
}
/**
 * With visually intensive elements, you may want to encourage GPU rendering.
 * This is done by tricking the browser into 3D rendering.
 */
/**
 * Effectively allows the user to click underlying elements.
 * Might want to disable later, like when Kinect integration is finished.
 * You may want to disable this, rely on Pointer Lock, and use elementFromPoint
 * to simulate left clicks on the table with Kinect depth data.
 */
